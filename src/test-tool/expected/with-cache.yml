version: 2.1
executors:
  default-executor:
    docker:
      - image: cypress/base:10
jobs:
  set-up-dependencies:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - checkout
      - run:
          name: Restore cache
          command: >
            restore_from_directories=("/tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )*/.npm" "/tmp/local-ci/v2-deps*/.npm")
            lci_restore_cache_dirname=~
            for directory_candidate in $restore_from_directories
              do
              if [ "$(find "$directory_candidate" 2>/dev/null)" ]
                then
                verified_directory=$(find "$directory_candidate" | tail -n1)
                echo "Restoring cached directory $verified_directory";
                cp -rn "$verified_directory" "$lci_restore_cache_dirname" || cp -ru "$verified_directory" "$lci_restore_cache_dirname";
                break;
              fi
            done
            restore_from_directories=("/tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )*/.cache" "/tmp/local-ci/v2-deps*/.cache")
            lci_restore_cache_dirname=~
            for directory_candidate in $restore_from_directories
              do
              if [ "$(find "$directory_candidate" 2>/dev/null)" ]
                then
                verified_directory=$(find "$directory_candidate" | tail -n1)
                echo "Restoring cached directory $verified_directory";
                cp -rn "$verified_directory" "$lci_restore_cache_dirname" || cp -ru "$verified_directory" "$lci_restore_cache_dirname";
                break;
              fi
            done
      - run:
          name: Install dependencies
          command: npm ci
      - run:
          name: Save cache
          command: |2
             if [ -d /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/.npm ]
                  then
                  echo "~/.npm is already cached, skipping"
                elif [ ! -d ~/.npm ]
                  then
                  echo "~/.npm does not exist, skipping caching"
                else
                  echo "Saving ~/.npm to the cache"
                  mkdir -p /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )
                  cp -rn ~/.npm /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/.npm || cp -ru ~/.npm /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/.npm
                fi
             if [ -d /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/.cache ]
                  then
                  echo "~/.cache is already cached, skipping"
                elif [ ! -d ~/.cache ]
                  then
                  echo "~/.cache does not exist, skipping caching"
                else
                  echo "Saving ~/.cache to the cache"
                  mkdir -p /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )
                  cp -rn ~/.cache /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/.cache || cp -ru ~/.cache /tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/.cache
                fi
      - run:
          name: Persist to workspace
          command: |-
            echo "Persisting ."
            cp -rn . /tmp/local-ci || cp -ru . /tmp/local-ci
  run-prettier:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Run prettier check on project files
          command: npm run prettier:check
      - run:
          name: Save cache
          command: |2
            if [ -d /tmp/local-ci/node-modules-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/node_modules ]
              then
              echo "node_modules is already cached, skipping"
            elif [ ! -d node_modules ]
              then
              echo "node_modules does not exist, skipping caching"
            else
              echo "Saving node_modules to the cache"
              mkdir -p /tmp/local-ci/node-modules-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )
              cp -rn node_modules /tmp/local-ci/node-modules-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/node_modules || cp -ru node_modules /tmp/local-ci/node-modules-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )/node_modules
            fi
  run-linter:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Run linter
          command: npm run lint
  run-unit-tests:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Run unit tests
          command: npm run test:unit
  e2e-tests:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Restore cache
          command: >
            restore_from_directories=("/tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )*/.npm" "/tmp/local-ci/v2-deps*/.npm" "/tmp/local-ci/node-modules-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )*/.npm")
            lci_restore_cache_dirname=~
            for directory_candidate in $restore_from_directories
              do
              if [ "$(find "$directory_candidate" 2>/dev/null)" ]
                then
                verified_directory=$(find "$directory_candidate" | tail -n1)
                echo "Restoring cached directory $verified_directory";
                cp -rn "$verified_directory" "$lci_restore_cache_dirname" || cp -ru "$verified_directory" "$lci_restore_cache_dirname";
                break;
              fi
            done
            restore_from_directories=("/tmp/local-ci/v2-deps-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )*/.cache" "/tmp/local-ci/v2-deps*/.cache" "/tmp/local-ci/node-modules-$( if [ -f "package-lock.json" ]; then (shasum "package-lock.json" 2>/dev/null || sha256sum "package-lock.json" 2>/dev/null)  | awk '{print $1}'; fi )*/.cache")
            lci_restore_cache_dirname=~
            for directory_candidate in $restore_from_directories
              do
              if [ "$(find "$directory_candidate" 2>/dev/null)" ]
                then
                verified_directory=$(find "$directory_candidate" | tail -n1)
                echo "Restoring cached directory $verified_directory";
                cp -rn "$verified_directory" "$lci_restore_cache_dirname" || cp -ru "$verified_directory" "$lci_restore_cache_dirname";
                break;
              fi
            done
      - run:
          name: Run e2e tests
          command: npm run test:e2e:headless
  build:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Build
          command: npm run build
      - run:
          name: Persist to workspace
          command: |-
            echo "Persisting ."
            cp -rn . /tmp/local-ci || cp -ru . /tmp/local-ci
  verify-bundles-sizes:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Check bundles sizes
          command: npm run bundlesize
  deploy:
    executor: default-executor
    steps:
      - run:
          name: Ensure volume is writable
          command: >-
            if [ "$(ls -ld /tmp/local-ci | awk '{print $3}')" != "$(whoami)" ] && [ "$(sudo -V 2>/dev/null)" ]
              then
              sudo chown $(whoami) /tmp/local-ci
            fi
      - run:
          name: Set more environment variables
          command: >-
            echo 'echo "export CIRCLE_SHA1=037f2d35d59080dc313608c565b55f37d2f42c7e"
            echo "export CIRCLE_BRANCH=develop"
            echo "export CIRCLE_PROJECT_REPONAME=local-ci"
            echo "export CIRCLE_REPOSITORY_URL=git@github.com:getlocalci/local-ci.git"' >> $BASH_ENV
      - run:
          name: Attach workspace
          command: |-
            if [ ! -d /tmp/local-ci ]
              then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's not a directory. It might require a job to run before it."
              elif [ ! "$(ls -A /tmp/local-ci)" ]
                then
                echo "Warning: tried to attach_workspace to /tmp/local-ci, but it's empty. It might require a job to run before it."
              else
                echo "Attaching /tmp/local-ci/."
                cp -rn /tmp/local-ci/. . || cp -ru /tmp/local-ci/. .
            fi
      - run:
          name: Firebase deploy
          command: |
            if [[ "$CIRCLE_BRANCH" == "master" ]]
              then
              npm run firebase:deploy:ci
            fi
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - set-up-dependencies
      - run-prettier:
          requires:
            - set-up-dependencies
      - run-linter:
          requires:
            - set-up-dependencies
      - run-unit-tests:
          requires:
            - set-up-dependencies
      - e2e-tests:
          requires:
            - set-up-dependencies
      - build:
          requires:
            - run-prettier
            - run-linter
            - run-unit-tests
            - e2e-tests
      - verify-bundles-sizes:
          requires:
            - build
      - deploy:
          requires:
            - verify-bundles-sizes
